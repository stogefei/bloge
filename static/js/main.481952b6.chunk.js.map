{"version":3,"sources":["store/reducer.js","store/index.js","store/actionTypes.js","app/App.js","serviceWorker.js","index.js"],"names":["defaultState","inputValue","list","store","createStore","state","arguments","length","undefined","action","type","newState","JSON","parse","stringify","value","push","splice","indexOf","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getState","console","log","handleInputChange","bind","assertThisInitialized","handleStoreChange","handleDelete","handleSumt","subscribe","_this2","react_default","a","createElement","className","input","placeholder","onChange","style","width","es_button","onClick","marginTop","bordered","dataSource","renderItem","item","Item","e","target","dispatch","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.481952b6.chunk.js","sourcesContent":["import { ChangeInputValue, AddList, DeleteList } from './actionTypes'\r\nconst defaultState = {\r\n    inputValue: '',\r\n    list: [1,2,3]\r\n}\r\n\r\nexport default (state = defaultState, action) =>{\r\n   \r\n    if (action.type === ChangeInputValue) {\r\n        const newState =  JSON.parse(JSON.stringify(state))\r\n        newState.inputValue = action.value\r\n        return newState\r\n    }\r\n    if (action.type === AddList) {\r\n        const newState =  JSON.parse(JSON.stringify(state))\r\n        newState.list.push(action.value)\r\n        newState.inputValue = ''\r\n        return newState\r\n    }\r\n    if (action.type === DeleteList) {\r\n        const newState =  JSON.parse(JSON.stringify(state))\r\n        newState.list.splice(newState.list.indexOf(action.value), 1)\r\n        return newState\r\n    }\r\n    return state;\r\n}","import {createStore} from 'redux';\r\nimport reducer from './reducer'\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","export const ChangeInputValue  = 'change_input_value'\r\nexport const AddList  = 'add_list'\r\nexport const DeleteList  = 'delete_list'","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport { Input, Button, List  } from 'antd';\r\nimport store from '../store'\r\nimport {ChangeInputValue, AddList, DeleteList} from '../store/actionTypes'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = store.getState()\r\n\r\n    console.log(this.state, 'this.state')\r\n    this.handleInputChange = this.handleInputChange.bind(this)\r\n    this.handleStoreChange = this.handleStoreChange.bind(this)\r\n    this.handleDelete = this.handleDelete.bind(this)\r\n    this.handleSumt = this.handleSumt.bind(this)\r\n    store.subscribe(this.handleStoreChange)\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Input placeholder=\"Basic usage\" \r\n        onChange={this.handleInputChange}\r\n        value={this.state.inputValue} style={{'width':300}} />\r\n        <Button type=\"primary\" onClick={this.handleSumt}>提交</Button>\r\n        <List\r\n         style={{\"marginTop\": 30}}\r\n          bordered\r\n          dataSource={this.state.list}\r\n          renderItem={item => (<List.Item onClick={e => {  this.handleDelete(item) }}>{item}</List.Item>)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleInputChange(e) {\r\n    const action = {\r\n      type: ChangeInputValue,\r\n      value: e.target.value\r\n    }\r\n    store.dispatch(action)\r\n    // console.log(e.target.value)\r\n  }\r\n\r\n  handleStoreChange() {\r\n    // console.log(store.getState())\r\n    this.setState(store.getState())\r\n  }\r\n\r\n  handleSumt() {\r\n    const action = {\r\n      type: AddList,\r\n      value: store.getState().inputValue\r\n    }\r\n    store.dispatch(action)\r\n  }\r\n  handleDelete(e) {\r\n    console.log(e)\r\n    const action = {\r\n      type: DeleteList,\r\n      value: e\r\n    }\r\n    store.dispatch(action)\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}